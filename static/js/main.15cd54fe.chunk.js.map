{"version":3,"sources":["TodoListHeader.js","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","props","_this","Object","classCallCheck","this","_super","call","onAddTaskClick","newText","newTaskTitleRef","current","value","addTask","render","react_default","a","createElement","className","ref","type","placeholder","onClick","React","createRef","Component","TodoListTask","onIsDoneChanged","e","changeStatus","task","currentTarget","checked","isDone","onChange","title","priority","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","classForAll","filterValue","classForCompleted","classForActive","changeFilter","App","state","newTask","newTasks","concat","toConsumableArray","setState","newFilterValue","taska","objectSpread2","src_TodoListHeader","src_TodoListTasks","filter","src_TodoListFooter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15cd54fe.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListHeader extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTaskTitleRef = React.createRef();\n    }\n\n    onAddTaskClick = () => {\n        let newText = this.newTaskTitleRef.current.value;\n        this.newTaskTitleRef.current.value = \"\";\n        this.props.addTask(newText);\n    }\n\n\n    render = () => {\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\n                <div className=\"todoList-newTaskForm\">\n                    <input ref={this.newTaskTitleRef}\n                           type=\"text\"\n                           placeholder=\"New task name\"/>\n                    <button onClick={this.onAddTaskClick}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListHeader;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n    onIsDoneChanged=(e)=>{\n        this.props.changeStatus(this.props.task,e.currentTarget.checked)\n        }\n    render = () => {\n        return (\n                <div className=\"todoList-task\">\n                    <input type=\"checkbox\"\n                           checked={this.props.task.isDone}\n                           onChange={this.onIsDoneChanged}\n                    />\n                    <span>{this.props.task.title}</span>,\n                    priority: {this.props.task.priority}\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n\n    render = () => {\n\n        let tasksElements = this.props.tasks.map(task => <TodoListTask\n            changeStatus={this.props.changeStatus}\n            task={task}\n            // title={task.title}\n            // isDone={task.isDone}\n            // priority={task.priority}\n        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListFooter extends React.Component {\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                <button\n                    className={classForAll}\n                    onClick={()=>{this.props.changeFilter(\"All\")}}\n                >All</button>\n                <button\n                    className={classForCompleted}\n                    onClick={()=>{this.props.changeFilter(\"Completed\")}}\n                >Completed</button>\n                <button\n                    className={classForActive}\n                    onClick={()=>{this.props.changeFilter(\"Active\")}}\n                >Active</button>\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        tasks: [\n            {title: \"JS\", isDone: true, priority: \"medium\"},\n            {title: \"HTML\", isDone: true, priority: \"low\"},\n            {title: \"CSS\", isDone: true, priority: \"low\"},\n            {title: \"ReactJS\", isDone: false, priority: \"high\"}\n        ],\n        filterValue: \"Active\"\n    };\n\n    addTask = (newText) => {\n\n        let newTask = {\n            title: newText,\n            isDone: false,\n            priority: \"low\"\n        };\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({\n            tasks: newTasks\n        });\n    }\n///////////\n    changeFilter = (newFilterValue) => {\n        this.setState({filterValue: newFilterValue})\n    }\n\n\n    changeStatus=(task, isDone)=>{\n        let newTasks= this.state.tasks.map(taska=>{\n            if(taska!==task){return taska}\n            else {return {...taska, isDone: isDone}}\n        });\n        this.setState({tasks: newTasks});\n    }\n\n    render = () => {\n\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <TodoListHeader addTask={this.addTask} />\n                    <TodoListTasks\n                        changeStatus={this.changeStatus}\n                        tasks={this.state.tasks.filter(taska => {\n                            if (this.state.filterValue === \"All\") {\n                                return true;\n                            }\n                            if (this.state.filterValue === \"Completed\") {\n                                return taska.isDone === true\n                            }\n\n                            if (this.state.filterValue === \"Active\") {\n                                return taska.isDone === false\n                            }\n                        }\n                    )}/>\n                    <TodoListFooter\n                        filterValue={this.state.filterValue}\n                        changeFilter={this.changeFilter}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}